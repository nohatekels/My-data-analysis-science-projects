{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7979be2",
   "metadata": {},
   "source": [
    "# Exploring the Relationship between Living alone and mental health outcomes using Toronto Census data from the year 2016"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9dfc1b7",
   "metadata": {},
   "source": [
    "## Index/Plan\n",
    "  \n",
    "   Step 1. Project aim and variables used\n",
    "    \n",
    "   Step 2. Cleaning the data to make it easier to use for analysis\n",
    "    \n",
    "   Step 3. Statistical summary and Histogram of employed variables\n",
    "    \n",
    "   Step 4: Scatterplot, simple regression, and regression equation\n",
    "   \n",
    "   Step 5. testing the null hypothesis: communities with above average rates of living alone vs below average\n",
    "      \n",
    "   Step 6. Conclusion and limitations: the association between housing type and mental health/addiction related hospital admissions. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "495f60b4",
   "metadata": {},
   "source": [
    "##    Step1: Project aim and variables used\n",
    "    \n",
    "This project will analyze and try to find if there is a relationship between rates of living alone and mental health/addiction related hospital admission rates in Toronto communities. As such, I will be using Toronto census data on hospital admissions in 2016 and Toronto census data on housing conditons (living alone) in 2016. The hypothesis which this analysis hopes to inform states that elevated rates of living alone in communities leads to a higher prevalence of mental health related hospitalization. The reasoning behind this supposed relationship relies on the assumption that loneliness is a strong driver of poor mental health outcome due to the isolation/lack of companionship it entails. It has often been said that humans are social creatures so it would only make sense that reduced rates of social interaction as a result of living conditions would impact mental health negatively. In terms of methods that will be used to support the hypothesis, regression tables, regression equations, confidence intervals, and null hypotheses will all be employed.\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b125fe0",
   "metadata": {},
   "source": [
    "#### Explanatory variable: Living alone rate\n",
    "\n",
    "The living alone rate will be measured using Toronto census data (2016) on residents living alone. The variables of interest in this dataset are named 'TOTAL POPULATION in PRIVATE HOUSEHOLDS LIVING ALONE' and 'TOTAL POPULATION in PRIVATE HOUSEHOLDS'. By dividing these 2 variables, I derive my x-variable for the analysis which measures the percent of residents among all private households in a community that live alone. The value of this variable is straightforward in that it reflects the likelihood of living alone, percent wise, among private households in different Toronto communities. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eb06ffd",
   "metadata": {},
   "source": [
    "#### Response Variable: Mental health and addiction related hospital admission rate\n",
    " \n",
    " The response variable in this analysis is taken from the Toronto census dataset on mental health and addiction related hospital admission (2016). It measures the amount of mental health or addiction related hospital admissions in a Toronto community for every 1000 people over 15 years of age. Hospital admission rates on the basis of mental health would be a good indicator of mental health outcomes as hospital admissions are usually serious making it more reliable than self-reported data while also being, as is stated in the variables name, a direct measure of mental health."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d0630c8",
   "metadata": {},
   "source": [
    "## Step 2: Cleaning the data to make it easier to use for my analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7528b9b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: openpyxl in /opt/conda/lib/python3.11/site-packages (3.1.2)\r\n",
      "Requirement already satisfied: et-xmlfile in /opt/conda/lib/python3.11/site-packages (from openpyxl) (1.1.0)\r\n"
     ]
    }
   ],
   "source": [
    "! pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38e7dc0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e5109b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Male</th>\n",
       "      <th>Female</th>\n",
       "      <th>Both sexes</th>\n",
       "      <th>Male.1</th>\n",
       "      <th>Female.1</th>\n",
       "      <th>Both sexes.1</th>\n",
       "      <th>Male.2</th>\n",
       "      <th>Female.2</th>\n",
       "      <th>...</th>\n",
       "      <th>Female.3</th>\n",
       "      <th>Both sexes.3</th>\n",
       "      <th>Rate Ratio**, Both sexes.1</th>\n",
       "      <th>H/ L/ NS, Both sexes.1</th>\n",
       "      <th>(95% CI) LL, Male.1</th>\n",
       "      <th>(95% CI) UL, Male.1</th>\n",
       "      <th>(95% CI) LL, Female.1</th>\n",
       "      <th>(95% CI) UL, Female.1</th>\n",
       "      <th>(95% CI) LL, Both sexes.1</th>\n",
       "      <th>(95% CI) UL, Both sexes.1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>243</td>\n",
       "      <td>153</td>\n",
       "      <td>396</td>\n",
       "      <td>15296</td>\n",
       "      <td>15166</td>\n",
       "      <td>30462</td>\n",
       "      <td>8.9</td>\n",
       "      <td>5.3</td>\n",
       "      <td>...</td>\n",
       "      <td>5.1</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1.16</td>\n",
       "      <td>H</td>\n",
       "      <td>6.9</td>\n",
       "      <td>8.9</td>\n",
       "      <td>4.3</td>\n",
       "      <td>5.9</td>\n",
       "      <td>5.9</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>341</td>\n",
       "      <td>124</td>\n",
       "      <td>465</td>\n",
       "      <td>13682</td>\n",
       "      <td>14592</td>\n",
       "      <td>28274</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>...</td>\n",
       "      <td>4.3</td>\n",
       "      <td>8.2</td>\n",
       "      <td>1.46</td>\n",
       "      <td>H</td>\n",
       "      <td>11.1</td>\n",
       "      <td>13.7</td>\n",
       "      <td>3.6</td>\n",
       "      <td>5.1</td>\n",
       "      <td>7.5</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>83</td>\n",
       "      <td>45</td>\n",
       "      <td>128</td>\n",
       "      <td>4352</td>\n",
       "      <td>4541</td>\n",
       "      <td>8893</td>\n",
       "      <td>10.7</td>\n",
       "      <td>5.3</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.2</td>\n",
       "      <td>1.29</td>\n",
       "      <td>H</td>\n",
       "      <td>7.5</td>\n",
       "      <td>11.6</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6.4</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>95</td>\n",
       "      <td>91</td>\n",
       "      <td>186</td>\n",
       "      <td>4545</td>\n",
       "      <td>4841</td>\n",
       "      <td>9386</td>\n",
       "      <td>10.8</td>\n",
       "      <td>9.8</td>\n",
       "      <td>...</td>\n",
       "      <td>9.4</td>\n",
       "      <td>9.9</td>\n",
       "      <td>1.77</td>\n",
       "      <td>H</td>\n",
       "      <td>8.4</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>11.3</td>\n",
       "      <td>8.5</td>\n",
       "      <td>11.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>71</td>\n",
       "      <td>43</td>\n",
       "      <td>114</td>\n",
       "      <td>4013</td>\n",
       "      <td>4242</td>\n",
       "      <td>8255</td>\n",
       "      <td>8.2</td>\n",
       "      <td>5.1</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>1.23</td>\n",
       "      <td>NS</td>\n",
       "      <td>6.9</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6.4</td>\n",
       "      <td>5.6</td>\n",
       "      <td>8.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>95</td>\n",
       "      <td>129</td>\n",
       "      <td>224</td>\n",
       "      <td>9054</td>\n",
       "      <td>10561</td>\n",
       "      <td>19615</td>\n",
       "      <td>5.4</td>\n",
       "      <td>6.3</td>\n",
       "      <td>...</td>\n",
       "      <td>6.1</td>\n",
       "      <td>5.7</td>\n",
       "      <td>1.02</td>\n",
       "      <td>NS</td>\n",
       "      <td>4.2</td>\n",
       "      <td>6.3</td>\n",
       "      <td>5.1</td>\n",
       "      <td>7.2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>86</td>\n",
       "      <td>80</td>\n",
       "      <td>166</td>\n",
       "      <td>6604</td>\n",
       "      <td>7463</td>\n",
       "      <td>14067</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>...</td>\n",
       "      <td>5.4</td>\n",
       "      <td>5.9</td>\n",
       "      <td>1.05</td>\n",
       "      <td>NS</td>\n",
       "      <td>5.1</td>\n",
       "      <td>7.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>6.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>29</td>\n",
       "      <td>50</td>\n",
       "      <td>79</td>\n",
       "      <td>4009</td>\n",
       "      <td>4734</td>\n",
       "      <td>8743</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>...</td>\n",
       "      <td>5.3</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>L</td>\n",
       "      <td>2.3</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.8</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>14668</td>\n",
       "      <td>12265</td>\n",
       "      <td>26933</td>\n",
       "      <td>1152485</td>\n",
       "      <td>1256911</td>\n",
       "      <td>2409396</td>\n",
       "      <td>6.8</td>\n",
       "      <td>5.3</td>\n",
       "      <td>...</td>\n",
       "      <td>4.9</td>\n",
       "      <td>5.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.3</td>\n",
       "      <td>6.5</td>\n",
       "      <td>4.8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td></td>\n",
       "      <td>Toronto Central (LHIN 7)</td>\n",
       "      <td>7618</td>\n",
       "      <td>6359</td>\n",
       "      <td>13977</td>\n",
       "      <td>526644</td>\n",
       "      <td>561547</td>\n",
       "      <td>1088191</td>\n",
       "      <td>7.4</td>\n",
       "      <td>5.8</td>\n",
       "      <td>...</td>\n",
       "      <td>5.7</td>\n",
       "      <td>6.4</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>7.1</td>\n",
       "      <td>7.4</td>\n",
       "      <td>5.5</td>\n",
       "      <td>5.8</td>\n",
       "      <td>6.3</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                         Unnamed: 1    Male  Female  Both sexes  \\\n",
       "0            1             West Humber-Clairville     243     153         396   \n",
       "1            2  Mount Olive-Silverstone-Jamestown     341     124         465   \n",
       "2            3       Thistletown-Beaumond Heights      83      45         128   \n",
       "3            4                    Rexdale-Kipling      95      91         186   \n",
       "4            5                   Elms-Old Rexdale      71      43         114   \n",
       "..         ...                                ...     ...     ...         ...   \n",
       "137        138                      Eglinton East      95     129         224   \n",
       "138        139                Scarborough Village      86      80         166   \n",
       "139        140                          Guildwood      29      50          79   \n",
       "140        NaN                    City of Toronto   14668   12265       26933   \n",
       "141                      Toronto Central (LHIN 7)    7618    6359       13977   \n",
       "\n",
       "       Male.1  Female.1  Both sexes.1    Male.2  Female.2  ...  Female.3  \\\n",
       "0       15296     15166         30462       8.9       5.3  ...       5.1   \n",
       "1       13682     14592         28274      13.0       4.3  ...       4.3   \n",
       "2        4352      4541          8893      10.7       5.3  ...       5.0   \n",
       "3        4545      4841          9386      10.8       9.8  ...       9.4   \n",
       "4        4013      4242          8255       8.2       5.1  ...       5.0   \n",
       "..        ...       ...           ...       ...       ...  ...       ...   \n",
       "137      9054     10561         19615       5.4       6.3  ...       6.1   \n",
       "138      6604      7463         14067       7.0       5.5  ...       5.4   \n",
       "139      4009      4734          8743       4.0       6.6  ...       5.3   \n",
       "140   1152485   1256911       2409396       6.8       5.3  ...       4.9   \n",
       "141    526644    561547       1088191       7.4       5.8  ...       5.7   \n",
       "\n",
       "    Both sexes.3 Rate Ratio**, Both sexes.1  H/ L/ NS, Both sexes.1  \\\n",
       "0            6.5                       1.16                       H   \n",
       "1            8.2                       1.46                       H   \n",
       "2            7.2                       1.29                       H   \n",
       "3            9.9                       1.77                       H   \n",
       "4            6.9                       1.23                      NS   \n",
       "..           ...                        ...                     ...   \n",
       "137          5.7                       1.02                      NS   \n",
       "138          5.9                       1.05                      NS   \n",
       "139          4.5                        0.8                       L   \n",
       "140          5.6                        NaN                     NaN   \n",
       "141          6.4                                                      \n",
       "\n",
       "     (95% CI) LL, Male.1  (95% CI) UL, Male.1  (95% CI) LL, Female.1  \\\n",
       "0                    6.9                  8.9                    4.3   \n",
       "1                   11.1                 13.7                    3.6   \n",
       "2                    7.5                 11.6                    3.5   \n",
       "3                    8.4                 12.5                    7.5   \n",
       "4                    6.9                 11.0                    3.5   \n",
       "..                   ...                  ...                    ...   \n",
       "137                  4.2                  6.3                    5.1   \n",
       "138                  5.1                  7.9                    4.2   \n",
       "139                  2.3                  4.9                    3.8   \n",
       "140                  6.3                  6.5                    4.8   \n",
       "141                  7.1                  7.4                    5.5   \n",
       "\n",
       "     (95% CI) UL, Female.1  (95% CI) LL, Both sexes.1  \\\n",
       "0                      5.9                        5.9   \n",
       "1                      5.1                        7.5   \n",
       "2                      6.4                        6.0   \n",
       "3                     11.3                        8.5   \n",
       "4                      6.4                        5.6   \n",
       "..                     ...                        ...   \n",
       "137                    7.2                        5.0   \n",
       "138                    6.5                        5.0   \n",
       "139                    6.7                        3.5   \n",
       "140                    5.0                        5.5   \n",
       "141                    5.8                        6.3   \n",
       "\n",
       "     (95% CI) UL, Both sexes.1  \n",
       "0                          7.1  \n",
       "1                          9.0  \n",
       "2                          8.4  \n",
       "3                         11.3  \n",
       "4                          8.2  \n",
       "..                         ...  \n",
       "137                        6.5  \n",
       "138                        6.8  \n",
       "139                        5.5  \n",
       "140                        5.7  \n",
       "141                        6.5  \n",
       "\n",
       "[142 rows x 30 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hospital_data = pd.read_excel('1_hosp_MHandAR_2015-2016_RPDB_neighb_LHIN_7.xlsx', header = 14) \n",
    "living_alone_data = pd.read_excel('1_socdem_2016_LivingAlone_ADL_Neighb_LHIN_7.xlsx', header = 13)\n",
    "hospital_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0659543",
   "metadata": {},
   "source": [
    "The first step I will take is cleaning up my data and extracting the data I plan to use for my analysis. Since the original data for hospital admissions has both columns and sub-columns, the order of columns gets confused and many columns are renamed to 'unnamed: #'. Firstly, going back to my excel data set, I am interested in the columns that contain the average annual rate of Mental Health and Addiction-related Hospitalizations for both sexes ages 15+. So I select the columns 'Unnamed: 0', 'Unnamed: 1', and 'Both sexes.3'. The first 2 correspond to the neighborhood names and neighborhood ID, while the last corresponds to the average annual rate I am looking for. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "01101927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Both sexes.3</th>\n",
       "      <th>Both sexes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>6.5</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>8.2</td>\n",
       "      <td>465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>7.2</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>9.9</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>6.9</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>5.7</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>5.9</td>\n",
       "      <td>166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>4.5</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>26933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td></td>\n",
       "      <td>Toronto Central (LHIN 7)</td>\n",
       "      <td>6.4</td>\n",
       "      <td>13977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                         Unnamed: 1  Both sexes.3  Both sexes\n",
       "0            1             West Humber-Clairville           6.5         396\n",
       "1            2  Mount Olive-Silverstone-Jamestown           8.2         465\n",
       "2            3       Thistletown-Beaumond Heights           7.2         128\n",
       "3            4                    Rexdale-Kipling           9.9         186\n",
       "4            5                   Elms-Old Rexdale           6.9         114\n",
       "..         ...                                ...           ...         ...\n",
       "137        138                      Eglinton East           5.7         224\n",
       "138        139                Scarborough Village           5.9         166\n",
       "139        140                          Guildwood           4.5          79\n",
       "140        NaN                    City of Toronto           5.6       26933\n",
       "141                      Toronto Central (LHIN 7)           6.4       13977\n",
       "\n",
       "[142 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "select_columns = ['Unnamed: 0', 'Unnamed: 1', 'Both sexes.3', 'Both sexes']\n",
    "hospital_analyze = hospital_data[select_columns] # select the columns listed above from orginal hopital admission data\n",
    "hospital_analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac1e8051",
   "metadata": {},
   "source": [
    "Next I rename my columns to match better what they are describing. Especially, the final column of the redacted dataframe because 'Unnamed' is not at all descriptive of what it measures which is 'average annual rate of Mental Health and Addiction-related Hospitalizations for both sexes'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "42af081a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighb ID</th>\n",
       "      <th>neighb name</th>\n",
       "      <th>MH_hospital_rate</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>6.5</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>8.2</td>\n",
       "      <td>465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>7.2</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>9.9</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>6.9</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>5.7</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>5.9</td>\n",
       "      <td>166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>4.5</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>26933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td></td>\n",
       "      <td>Toronto Central (LHIN 7)</td>\n",
       "      <td>6.4</td>\n",
       "      <td>13977</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    neighb ID                        neighb name  MH_hospital_rate  Population\n",
       "0           1             West Humber-Clairville               6.5         396\n",
       "1           2  Mount Olive-Silverstone-Jamestown               8.2         465\n",
       "2           3       Thistletown-Beaumond Heights               7.2         128\n",
       "3           4                    Rexdale-Kipling               9.9         186\n",
       "4           5                   Elms-Old Rexdale               6.9         114\n",
       "..        ...                                ...               ...         ...\n",
       "137       138                      Eglinton East               5.7         224\n",
       "138       139                Scarborough Village               5.9         166\n",
       "139       140                          Guildwood               4.5          79\n",
       "140       NaN                    City of Toronto               5.6       26933\n",
       "141                     Toronto Central (LHIN 7)               6.4       13977\n",
       "\n",
       "[142 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict1 = {'Unnamed: 0' : 'neighb ID', 'Unnamed: 1': 'neighb name', 'Both sexes.3': 'MH_hospital_rate', 'Both sexes': 'Population' }\n",
    "hospital_analyze2 = hospital_analyze.rename(columns = dict1) # columns renamed\n",
    "hospital_analyze2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fba801d8",
   "metadata": {},
   "source": [
    "Next I do the same with the excel data set that tracks living alone in private households among Toronto Communities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c41d4778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Population - Both</th>\n",
       "      <th>Population - Male</th>\n",
       "      <th>Population - Female</th>\n",
       "      <th>Population - Both.1</th>\n",
       "      <th>Population - Male.1</th>\n",
       "      <th>Population - Male, \\nReport with Caution (*)</th>\n",
       "      <th>Population - Female.1</th>\n",
       "      <th>Population - Female, Report with Caution (*)</th>\n",
       "      <th>...</th>\n",
       "      <th>Population - Male.30</th>\n",
       "      <th>Population - Male, \\nReport with Caution (*).24</th>\n",
       "      <th>Population - Female.30</th>\n",
       "      <th>Population - Female, Report with Caution (*).19</th>\n",
       "      <th>Population - Both.31</th>\n",
       "      <th>Population - Both, \\nReport with Caution (*).17</th>\n",
       "      <th>Population - Male.31</th>\n",
       "      <th>Population - Male, \\nReport with Caution (*).25</th>\n",
       "      <th>Population - Female.31</th>\n",
       "      <th>Population - Female, \\nReport with Caution (*)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>1785</td>\n",
       "      <td>710</td>\n",
       "      <td>1060</td>\n",
       "      <td>95</td>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>1490</td>\n",
       "      <td>790</td>\n",
       "      <td>710</td>\n",
       "      <td>140</td>\n",
       "      <td>70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>530</td>\n",
       "      <td>290</td>\n",
       "      <td>225</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>615</td>\n",
       "      <td>300</td>\n",
       "      <td>285</td>\n",
       "      <td>100</td>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>530</td>\n",
       "      <td>260</td>\n",
       "      <td>265</td>\n",
       "      <td>55</td>\n",
       "      <td>25</td>\n",
       "      <td>*</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138.0</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>1320</td>\n",
       "      <td>630</td>\n",
       "      <td>690</td>\n",
       "      <td>235</td>\n",
       "      <td>110</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20</td>\n",
       "      <td>*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139.0</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>920</td>\n",
       "      <td>450</td>\n",
       "      <td>500</td>\n",
       "      <td>190</td>\n",
       "      <td>35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140.0</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>740</td>\n",
       "      <td>320</td>\n",
       "      <td>420</td>\n",
       "      <td>115</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>95</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>*</td>\n",
       "      <td>25</td>\n",
       "      <td>*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>152065</td>\n",
       "      <td>71075</td>\n",
       "      <td>80985</td>\n",
       "      <td>29135</td>\n",
       "      <td>12375</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16755</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1860</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6755</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2680</td>\n",
       "      <td>NaN</td>\n",
       "      <td>750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1930</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Toronto Central (LHIN 7)</td>\n",
       "      <td>64620</td>\n",
       "      <td>30230</td>\n",
       "      <td>34325</td>\n",
       "      <td>16945</td>\n",
       "      <td>7615</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9705</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>735</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1085</td>\n",
       "      <td>NaN</td>\n",
       "      <td>290</td>\n",
       "      <td>NaN</td>\n",
       "      <td>810</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 163 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0                               Unnamed: 1  Population - Both  \\\n",
       "0           1.0                   West Humber-Clairville               1785   \n",
       "1           2.0        Mount Olive-Silverstone-Jamestown               1490   \n",
       "2           3.0             Thistletown-Beaumond Heights                530   \n",
       "3           4.0                          Rexdale-Kipling                615   \n",
       "4           5.0                         Elms-Old Rexdale                530   \n",
       "..          ...                                      ...                ...   \n",
       "137       138.0                            Eglinton East               1320   \n",
       "138       139.0                      Scarborough Village                920   \n",
       "139       140.0                                Guildwood                740   \n",
       "140         NaN  City of Toronto                                     152065   \n",
       "141         NaN            Toronto Central (LHIN 7)                   64620   \n",
       "\n",
       "     Population - Male  Population - Female  Population - Both.1  \\\n",
       "0                  710                 1060                   95   \n",
       "1                  790                  710                  140   \n",
       "2                  290                  225                   30   \n",
       "3                  300                  285                  100   \n",
       "4                  260                  265                   55   \n",
       "..                 ...                  ...                  ...   \n",
       "137                630                  690                  235   \n",
       "138                450                  500                  190   \n",
       "139                320                  420                  115   \n",
       "140              71075                80985                29135   \n",
       "141              30230                34325                16945   \n",
       "\n",
       "     Population - Male.1 Population - Male, \\nReport with Caution (*)  \\\n",
       "0                     55                                          NaN   \n",
       "1                     70                                          NaN   \n",
       "2                     40                                          NaN   \n",
       "3                     60                                          NaN   \n",
       "4                     25                                            *   \n",
       "..                   ...                                          ...   \n",
       "137                  110                                          NaN   \n",
       "138                   35                                          NaN   \n",
       "139                   10                                            *   \n",
       "140                12375                                          NaN   \n",
       "141                 7615                                          NaN   \n",
       "\n",
       "     Population - Female.1 Population - Female, Report with Caution (*)  ...  \\\n",
       "0                       55                                          NaN  ...   \n",
       "1                       80                                          NaN  ...   \n",
       "2                        0                                          NaN  ...   \n",
       "3                       45                                          NaN  ...   \n",
       "4                       20                                            *  ...   \n",
       "..                     ...                                          ...  ...   \n",
       "137                    105                                          NaN  ...   \n",
       "138                    110                                          NaN  ...   \n",
       "139                     95                                          NaN  ...   \n",
       "140                  16755                                          NaN  ...   \n",
       "141                   9705                                          NaN  ...   \n",
       "\n",
       "     Population - Male.30 Population - Male, \\nReport with Caution (*).24  \\\n",
       "0                      10                                               *   \n",
       "1                      10                                               *   \n",
       "2                      20                                               *   \n",
       "3                       0                                             NaN   \n",
       "4                      10                                               *   \n",
       "..                    ...                                             ...   \n",
       "137                     0                                             NaN   \n",
       "138                    10                                               *   \n",
       "139                    40                                             NaN   \n",
       "140                  1860                                             NaN   \n",
       "141                   735                                             NaN   \n",
       "\n",
       "     Population - Female.30 Population - Female, Report with Caution (*).19  \\\n",
       "0                        30                                             NaN   \n",
       "1                        20                                               *   \n",
       "2                        10                                               *   \n",
       "3                        40                                             NaN   \n",
       "4                        10                                               *   \n",
       "..                      ...                                             ...   \n",
       "137                      30                                             NaN   \n",
       "138                      40                                             NaN   \n",
       "139                      40                                             NaN   \n",
       "140                    6755                                             NaN   \n",
       "141                    3005                                             NaN   \n",
       "\n",
       "     Population - Both.31 Population - Both, \\nReport with Caution (*).17  \\\n",
       "0                      20                                               *   \n",
       "1                      10                                               *   \n",
       "2                      20                                               *   \n",
       "3                      10                                               *   \n",
       "4                       0                                             NaN   \n",
       "..                    ...                                             ...   \n",
       "137                     0                                             NaN   \n",
       "138                     0                                             NaN   \n",
       "139                    45                                             NaN   \n",
       "140                  2680                                             NaN   \n",
       "141                  1085                                             NaN   \n",
       "\n",
       "     Population - Male.31 Population - Male, \\nReport with Caution (*).25  \\\n",
       "0                      10                                               *   \n",
       "1                       0                                             NaN   \n",
       "2                       0                                             NaN   \n",
       "3                      10                                               *   \n",
       "4                       0                                             NaN   \n",
       "..                    ...                                             ...   \n",
       "137                     0                                             NaN   \n",
       "138                     0                                             NaN   \n",
       "139                    10                                               *   \n",
       "140                   750                                             NaN   \n",
       "141                   290                                             NaN   \n",
       "\n",
       "     Population - Female.31 Population - Female, \\nReport with Caution (*)  \n",
       "0                        10                                              *  \n",
       "1                         0                                            NaN  \n",
       "2                        10                                              *  \n",
       "3                        20                                              *  \n",
       "4                         0                                            NaN  \n",
       "..                      ...                                            ...  \n",
       "137                      20                                              *  \n",
       "138                       0                                            NaN  \n",
       "139                      25                                              *  \n",
       "140                    1930                                            NaN  \n",
       "141                     810                                            NaN  \n",
       "\n",
       "[142 rows x 163 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "living_alone_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62728ca0",
   "metadata": {},
   "source": [
    "Here, I do the same process of selecting columns that are necessary for my analysis and renaming them to make clear what they measure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d50896cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighb ID</th>\n",
       "      <th>neighb name</th>\n",
       "      <th>Total pop in private households</th>\n",
       "      <th>total_population_in_private_households_living_alone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>1785</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>1490</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>530</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>615</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>530</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138.0</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>1320</td>\n",
       "      <td>235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139.0</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>920</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140.0</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>740</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>152065</td>\n",
       "      <td>29135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Toronto Central (LHIN 7)</td>\n",
       "      <td>64620</td>\n",
       "      <td>16945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     neighb ID                              neighb name  \\\n",
       "0          1.0                   West Humber-Clairville   \n",
       "1          2.0        Mount Olive-Silverstone-Jamestown   \n",
       "2          3.0             Thistletown-Beaumond Heights   \n",
       "3          4.0                          Rexdale-Kipling   \n",
       "4          5.0                         Elms-Old Rexdale   \n",
       "..         ...                                      ...   \n",
       "137      138.0                            Eglinton East   \n",
       "138      139.0                      Scarborough Village   \n",
       "139      140.0                                Guildwood   \n",
       "140        NaN  City of Toronto                           \n",
       "141        NaN            Toronto Central (LHIN 7)        \n",
       "\n",
       "     Total pop in private households  \\\n",
       "0                               1785   \n",
       "1                               1490   \n",
       "2                                530   \n",
       "3                                615   \n",
       "4                                530   \n",
       "..                               ...   \n",
       "137                             1320   \n",
       "138                              920   \n",
       "139                              740   \n",
       "140                           152065   \n",
       "141                            64620   \n",
       "\n",
       "     total_population_in_private_households_living_alone  \n",
       "0                                                   95    \n",
       "1                                                  140    \n",
       "2                                                   30    \n",
       "3                                                  100    \n",
       "4                                                   55    \n",
       "..                                                 ...    \n",
       "137                                                235    \n",
       "138                                                190    \n",
       "139                                                115    \n",
       "140                                              29135    \n",
       "141                                              16945    \n",
       "\n",
       "[142 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liv_columns = ['Unnamed: 0', 'Unnamed: 1','Population - Both', 'Population - Both.1']\n",
    "liv_alone_new = living_alone_data[liv_columns]\n",
    "liv_alone_new\n",
    "new_label = {'Unnamed: 0': 'neighb ID', 'Unnamed: 1': 'neighb name', 'Population - Both.1': 'total_population_in_private_households_living_alone','Population - Both': 'Total pop in private households'}\n",
    "liv_alone2 = liv_alone_new.rename(columns = new_label)\n",
    "liv_alone2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77f0f95e",
   "metadata": {},
   "source": [
    "Next, I will check for missing values of NaN in my new dataframes. Below, I check first for missing values in the final column of my redacted 'living alone' dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dc27e912",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "there are missing values in my living alone column: False\n",
      "there are missing values in my living alone column: False\n"
     ]
    }
   ],
   "source": [
    "truth_val = liv_alone2['total_population_in_private_households_living_alone'].isna().any() #checks for missing values\n",
    "print('there are missing values in my living alone column:', truth_val)\n",
    "\n",
    "truth_vale3 = liv_alone2['Total pop in private households'].isna().any()\n",
    "print('there are missing values in my living alone column:', truth_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e44bd66",
   "metadata": {},
   "source": [
    "Since there are no missing values, I have no need of removing any Toronto communities. Next, I check for missing values in my hospital admissions dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5aa3438",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "there are missing values in my hospital admissions columns: False\n"
     ]
    }
   ],
   "source": [
    "truth_val3 = hospital_analyze2['MH_hospital_rate'].isna().any()\n",
    "print('there are missing values in my hospital admissions columns:', truth_val3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368bea81",
   "metadata": {},
   "source": [
    "I have determined that there are no missing values in the columns of interest so no values will be removed from the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01dec06b",
   "metadata": {},
   "source": [
    "## Step 2.5: Merging the 2 data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f4402a48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighb ID</th>\n",
       "      <th>neighb name_x</th>\n",
       "      <th>MH_hospital_rate</th>\n",
       "      <th>Total pop in private households</th>\n",
       "      <th>total_population_in_private_households_living_alone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1785</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>8.2</td>\n",
       "      <td>1490</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>7.2</td>\n",
       "      <td>530</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>9.9</td>\n",
       "      <td>615</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>6.9</td>\n",
       "      <td>530</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>5.7</td>\n",
       "      <td>1320</td>\n",
       "      <td>235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>5.9</td>\n",
       "      <td>920</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>4.5</td>\n",
       "      <td>740</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>152065</td>\n",
       "      <td>29135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>64620</td>\n",
       "      <td>16945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    neighb ID                      neighb name_x  MH_hospital_rate  \\\n",
       "0           1             West Humber-Clairville               6.5   \n",
       "1           2  Mount Olive-Silverstone-Jamestown               8.2   \n",
       "2           3       Thistletown-Beaumond Heights               7.2   \n",
       "3           4                    Rexdale-Kipling               9.9   \n",
       "4           5                   Elms-Old Rexdale               6.9   \n",
       "..        ...                                ...               ...   \n",
       "137       138                      Eglinton East               5.7   \n",
       "138       139                Scarborough Village               5.9   \n",
       "139       140                          Guildwood               4.5   \n",
       "140       NaN                    City of Toronto               5.6   \n",
       "141       NaN                    City of Toronto               5.6   \n",
       "\n",
       "     Total pop in private households  \\\n",
       "0                               1785   \n",
       "1                               1490   \n",
       "2                                530   \n",
       "3                                615   \n",
       "4                                530   \n",
       "..                               ...   \n",
       "137                             1320   \n",
       "138                              920   \n",
       "139                              740   \n",
       "140                           152065   \n",
       "141                            64620   \n",
       "\n",
       "     total_population_in_private_households_living_alone  \n",
       "0                                                   95    \n",
       "1                                                  140    \n",
       "2                                                   30    \n",
       "3                                                  100    \n",
       "4                                                   55    \n",
       "..                                                 ...    \n",
       "137                                                235    \n",
       "138                                                190    \n",
       "139                                                115    \n",
       "140                                              29135    \n",
       "141                                              16945    \n",
       "\n",
       "[142 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data = hospital_analyze2.merge(liv_alone2, right_on = 'neighb ID', left_on = 'neighb ID') # merged the 2 datasets on column 'neighb ID'\n",
    "merged_data\n",
    "sel_col = ['neighb ID', 'neighb name_x', 'MH_hospital_rate' ,'Total pop in private households', 'total_population_in_private_households_living_alone']\n",
    "merged_new = merged_data[sel_col]\n",
    "merged_new"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8afb2dd5",
   "metadata": {},
   "source": [
    "The variable 'total population in private households living alone' may only reflect that communities with a higher population have more people living alone. This would naturally be the case since if a community has, for instance, twice the popualtion of another it would have probably more people living alone. To avoid such a dependency on population count, I create a new variable which tracks the rate of people living alone from the total population of private households. I do this by simply dividing the total living alone in private households per community by said communities total private household populations. This value will tell me the percent of people in private households in each community that live alone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e3934de3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_582/349614677.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  merged_new['living_alone_rate'] = merged_new['total_population_in_private_households_living_alone']/merged_new['Total pop in private households']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighb ID</th>\n",
       "      <th>neighb name_x</th>\n",
       "      <th>MH_hospital_rate</th>\n",
       "      <th>Total pop in private households</th>\n",
       "      <th>total_population_in_private_households_living_alone</th>\n",
       "      <th>living_alone_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1785</td>\n",
       "      <td>95</td>\n",
       "      <td>0.053221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>8.2</td>\n",
       "      <td>1490</td>\n",
       "      <td>140</td>\n",
       "      <td>0.093960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>7.2</td>\n",
       "      <td>530</td>\n",
       "      <td>30</td>\n",
       "      <td>0.056604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>9.9</td>\n",
       "      <td>615</td>\n",
       "      <td>100</td>\n",
       "      <td>0.162602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>6.9</td>\n",
       "      <td>530</td>\n",
       "      <td>55</td>\n",
       "      <td>0.103774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>5.7</td>\n",
       "      <td>1320</td>\n",
       "      <td>235</td>\n",
       "      <td>0.178030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>5.9</td>\n",
       "      <td>920</td>\n",
       "      <td>190</td>\n",
       "      <td>0.206522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>4.5</td>\n",
       "      <td>740</td>\n",
       "      <td>115</td>\n",
       "      <td>0.155405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>152065</td>\n",
       "      <td>29135</td>\n",
       "      <td>0.191596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>64620</td>\n",
       "      <td>16945</td>\n",
       "      <td>0.262225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    neighb ID                      neighb name_x  MH_hospital_rate  \\\n",
       "0           1             West Humber-Clairville               6.5   \n",
       "1           2  Mount Olive-Silverstone-Jamestown               8.2   \n",
       "2           3       Thistletown-Beaumond Heights               7.2   \n",
       "3           4                    Rexdale-Kipling               9.9   \n",
       "4           5                   Elms-Old Rexdale               6.9   \n",
       "..        ...                                ...               ...   \n",
       "137       138                      Eglinton East               5.7   \n",
       "138       139                Scarborough Village               5.9   \n",
       "139       140                          Guildwood               4.5   \n",
       "140       NaN                    City of Toronto               5.6   \n",
       "141       NaN                    City of Toronto               5.6   \n",
       "\n",
       "     Total pop in private households  \\\n",
       "0                               1785   \n",
       "1                               1490   \n",
       "2                                530   \n",
       "3                                615   \n",
       "4                                530   \n",
       "..                               ...   \n",
       "137                             1320   \n",
       "138                              920   \n",
       "139                              740   \n",
       "140                           152065   \n",
       "141                            64620   \n",
       "\n",
       "     total_population_in_private_households_living_alone  living_alone_rate  \n",
       "0                                                   95             0.053221  \n",
       "1                                                  140             0.093960  \n",
       "2                                                   30             0.056604  \n",
       "3                                                  100             0.162602  \n",
       "4                                                   55             0.103774  \n",
       "..                                                 ...                  ...  \n",
       "137                                                235             0.178030  \n",
       "138                                                190             0.206522  \n",
       "139                                                115             0.155405  \n",
       "140                                              29135             0.191596  \n",
       "141                                              16945             0.262225  \n",
       "\n",
       "[142 rows x 6 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_new['living_alone_rate'] = merged_new['total_population_in_private_households_living_alone']/merged_new['Total pop in private households']\n",
    "merged_new"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89052e1d",
   "metadata": {},
   "source": [
    "## Step 3. Statistical summary and Histogram of my variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2eefab47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    142.000000\n",
       "mean       5.673239\n",
       "std        2.769436\n",
       "min        1.900000\n",
       "25%        4.200000\n",
       "50%        5.100000\n",
       "75%        6.575000\n",
       "max       22.200000\n",
       "Name: MH_hospital_rate, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_new['MH_hospital_rate'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25bb1d18",
   "metadata": {},
   "source": [
    "Above is a statistical summary of the distribution of the response variable. The count indicates that there are 142 different data points or 142 different Toronto communities that are accounted for. The mean of 5.673 means that among all the communities in Toronto for every 1000 people over age 15, there are on average close to 6 people who have a mental health/addiction related hospital admission. The standard deviations tells us how spread out the values for our variable are from the mean. A standard deviation of 2.77 is fairly large in this case as it is nearly half the size of the variables mean. The minimum value communicates that the lowest amount of mental health/addic hospital admissions among all the Toronto communities was 1.9 people per 1000. The 25th percentile means that communities with 4.2 hospital admissions per 1000 were in the bottom 25% of communities. The same logic in interpretation follows for the next 2 percentiles. The maximum value communicates that the highest amount of mental health/addic hospital admissions from all the Toronto communities was 22.2 people per 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1aab1ec7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    142.000000\n",
       "mean       0.200347\n",
       "std        0.099855\n",
       "min        0.030928\n",
       "25%        0.129517\n",
       "50%        0.191606\n",
       "75%        0.242612\n",
       "max        0.552632\n",
       "Name: living_alone_rate, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_new['living_alone_rate'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "773ee6f0",
   "metadata": {},
   "source": [
    "Above is a statistical summary of the distribution of the explanatory variable. The count indicates that there are 142 different data points or 142 different Toronto communities that are accounted for. The mean of 0.2 means on average among all private household in Toronto, 20% of them are occupied by a resident who lives alone. The standard deviations tells us how spread out the values for our variable are from the mean. A standard deviation of 0.099 is fairly large as well in this case as it is more than half the size of the variables mean. The minimum value communicates that the community with lowest living alone rate had 3% of private holds with a resident living alone. The 25th percentile means that communities with 12.95% of their private households, or less, being classified as living alone are in the bottom 25 percent of Toronto communities in terms of this measure. The same logic in interpretation follows for the next 2 percentiles. The maximum value communicates that the community with highest living alone rate had 55% of private holds classified as living alone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7712ff99",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5f18f2c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "merged_new['living_alone_rate'].hist(bins=50, color= 'blue', density=True) # create histogram with 50 bins and y-axis measuring density rather than count\n",
    "plt.xlabel(\"living alone rate for private households\") #x-axis label\n",
    "plt.ylabel(\"Density\")\n",
    "plt.title(\"Distribution of living alone rates among private households among Toronto communities\") # title for histogram\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d98eb58e",
   "metadata": {},
   "source": [
    "The histogram above represents the distribution of the explanatory variable: living alone rates among pivate households in Toronto communities in other words. The y-axis tracks the density of our x-values so the height of the bars represent the percent of the total that they account for. As can be seen, almost all of the data falls between 3% to 30% living alone among private households, with the bulk of the data being between 10% and 30%. It is also shown that the median of the data is around 20% which matches the 50th percentile value of our statistical summary for our explanatory variable. There are data point however that stretch thinnly all the way to around 55% which indicates, along with the fact that most of our data falls between 10% to 30%, that the distribution is somewhat rightly skewed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "46194e4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "merged_new['MH_hospital_rate'].hist(bins=40, color= 'darkorange', density=True)\n",
    "plt.xlabel(\"MH hospitalization rate\") \n",
    "plt.ylabel(\"Density\")\n",
    "plt.title(\"Distribution of Mental Health hospital admission rates among Toronto communities\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5488edb",
   "metadata": {},
   "source": [
    "The histogram above represents the distribution of the response variable: Mental health and addiction related hospital admission rates. The y-axis tracks the density of the rates, in other words, what percent of the data on hospitalization rates falls under each x-axes value. As can be seen, almost all of the data falls between 2.5 to 10 hospital admissions per 1000 people, with the bulk of the data being between 2.5 and 7.5 admissions per 1000. It is also shown that the median of the data is close to 5 or 6 which matches our statistical summary table. There are data points however that stretch thinnly all the way to 22 which indicates, along with the fact that most of our data falls between 2.5-7.5, that the distribution is right skewed. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9674ee3e",
   "metadata": {},
   "source": [
    "## Step 4: Plotting the relationship among my variables, Scatterplot and regression line "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ff45ae3",
   "metadata": {},
   "source": [
    "In this step I will create a scatter plot the plots each Toronto community according to its living alone rate (x-axis) and its mental health related hospitalization rate (y-axis). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7f639bca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MH hospitalization rate')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(merged_new['living_alone_rate'], merged_new['MH_hospital_rate']) # create scatter plot using column names from merged_new dataset\n",
    "plt.title('Correlation between living alone rates for private households and mental health hospitalization rate among Toronto communities in 2016')\n",
    "plt.xlabel('living alone rate for private households')\n",
    "plt.ylabel('MH hospitalization rate')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6930cde3",
   "metadata": {},
   "source": [
    "Above I have my scatter plot for the correlation and in the cell below I will follow with the addition of a line of best fit to the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a68df7d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "113a31ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='living_alone_rate', ylabel='MH_hospital_rate'>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x = 'living_alone_rate', y = 'MH_hospital_rate', data = merged_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2a10c0b",
   "metadata": {},
   "source": [
    "Based on the regression plot above, there seems to be a clearly positively sloping regression line for the correlation. In other words, higher rates of living alone among private households correlates with higher rates of mental health related hospital admissions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "21c2333a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.OLS at 0x7f10b42a2d50>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.formula.api import ols\n",
    "\n",
    "\n",
    "reg_liv = ols('MH_hospital_rate ~ living_alone_rate', data = merged_new)\n",
    "\n",
    "reg_liv_fit = reg_liv.fit() \n",
    "reg_liv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7083c527",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "          <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>         <td>    3.0107</td> <td>    0.460</td> <td>    6.542</td> <td> 0.000</td> <td>    2.101</td> <td>    3.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>living_alone_rate</th> <td>   13.2897</td> <td>    2.057</td> <td>    6.460</td> <td> 0.000</td> <td>    9.222</td> <td>   17.357</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lcccccc}\n",
       "\\toprule\n",
       "                             & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{Intercept}           &       3.0107  &        0.460     &     6.542  &         0.000        &        2.101    &        3.921     \\\\\n",
       "\\textbf{living\\_alone\\_rate} &      13.2897  &        2.057     &     6.460  &         0.000        &        9.222    &       17.357     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\end{center}"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.table.SimpleTable'>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_liv_summ = reg_liv_fit.summary()\n",
    "\n",
    "reg_liv_summ.tables[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6bf0281",
   "metadata": {},
   "source": [
    "#### Regression equation \n",
    "$$\\texttt{MH_hospital_rate} = 3.0107 + 13.2897 \\times \\texttt{living_alone_rate}$$\n",
    "\n",
    "Interpretation of slope: The slope indicates that for every one percent increase in the living alone rate, the number of mental health or addiction related hospital admissions increases by ~13 people (13.2897) per 1000.\n",
    "\n",
    "Interpretation of y-intercept: The y-intercept in this case indicates that if the living alone rate is 0% then the number of mental health or addiction related hospital admissions would be ~3 people per 1000. In particular, when interpreting the living alone rate, this means that if the proportion living alone from all private households in a community was 0%, then the mental health/addiction hospitalization rate in that community would be ~3.\n",
    "\n",
    "Overall this simple regression indicates a strongly positve relationship between living alone rates among private households and the rate of mental health related hospital admission in said community. I will get into later why this could be, as in if there really is a casual relationship between our variables or if there is some other factor that has not been accounted for. For now though, I will continue to investigate if this positive relationship holds when using other statistical methods"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c49646e",
   "metadata": {},
   "source": [
    "#### Correlation to coefficient: R^2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "efca3a0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.22960889721844024"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_liv_fit.rsquared"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8c13ddd",
   "metadata": {},
   "source": [
    "Interpretation: The code in the cell above and its output tells us the correlation coefficient for our data. In other words, ~23% of the variation in mental health hospital admission rates in a community can be explained by said communities living alone rate among private households. Considering the context, there is a modest level of explanation by my model for mental health hospitalization rates among Toronto communities"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f1a0d0",
   "metadata": {},
   "source": [
    "## Step 5. Testing the Null Hypothesis\n",
    "\n",
    "Two claims:\n",
    "\n",
    "1. Null hypothesis: There is no difference in the average mental health hospital admission rate between Toronto communities with and without above average rates of living alone among private households.  \n",
    "\n",
    "2. Alternative hypothesis: There is a difference in the average mental health related hospital admission rate between Toronto communities with and without above average rates of living alone among private households.\n",
    "\n",
    "Interpretation of alternative hypothesis: Toronto communities with above average rates of living alone among private households have higher rates of mental health related hospital admissions. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "219e9aeb",
   "metadata": {},
   "source": [
    "The first step I will take is to divide the communities into 2 categories: above average living alone rate and below average rate. So I will create a new column that indicates whether the Toronto community is above average (Yes) or below (No). To determine the average, I will rely on the 50th percenntile value provided by the statistical summary of the living alone rate variable in step 3. I use the median rather than the mean because as determined by our histogram plot of the variables distribution, it is somewhat right skewed. Skew takes away from the accuracy of mean measure whereas median measure is more resistant to such."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f0c48505",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_new.loc[merged_new['living_alone_rate'] > 0.191606, 'abv_avg_livingalone'] = 'Yes' # new column called abv_avg_livingalone compares community living alone rate to median ~0.19 and returns yes or no for each community\n",
    "\n",
    "merged_new.loc[merged_new['living_alone_rate'] < 0.191606, 'abv_avg_livingalone'] = 'No'\n",
    "\n",
    "(merged_new['abv_avg_livingalone'] == 'Yes').sum() # just to check if half our values (71) fall above the median this way I know my code for the median measure is accurate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6ce4f089",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighb ID</th>\n",
       "      <th>neighb name_x</th>\n",
       "      <th>MH_hospital_rate</th>\n",
       "      <th>Total pop in private households</th>\n",
       "      <th>total_population_in_private_households_living_alone</th>\n",
       "      <th>living_alone_rate</th>\n",
       "      <th>abv_avg_livingalone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>West Humber-Clairville</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1785</td>\n",
       "      <td>95</td>\n",
       "      <td>0.053221</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Mount Olive-Silverstone-Jamestown</td>\n",
       "      <td>8.2</td>\n",
       "      <td>1490</td>\n",
       "      <td>140</td>\n",
       "      <td>0.093960</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Thistletown-Beaumond Heights</td>\n",
       "      <td>7.2</td>\n",
       "      <td>530</td>\n",
       "      <td>30</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rexdale-Kipling</td>\n",
       "      <td>9.9</td>\n",
       "      <td>615</td>\n",
       "      <td>100</td>\n",
       "      <td>0.162602</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Elms-Old Rexdale</td>\n",
       "      <td>6.9</td>\n",
       "      <td>530</td>\n",
       "      <td>55</td>\n",
       "      <td>0.103774</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>138</td>\n",
       "      <td>Eglinton East</td>\n",
       "      <td>5.7</td>\n",
       "      <td>1320</td>\n",
       "      <td>235</td>\n",
       "      <td>0.178030</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>139</td>\n",
       "      <td>Scarborough Village</td>\n",
       "      <td>5.9</td>\n",
       "      <td>920</td>\n",
       "      <td>190</td>\n",
       "      <td>0.206522</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>140</td>\n",
       "      <td>Guildwood</td>\n",
       "      <td>4.5</td>\n",
       "      <td>740</td>\n",
       "      <td>115</td>\n",
       "      <td>0.155405</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>152065</td>\n",
       "      <td>29135</td>\n",
       "      <td>0.191596</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>City of Toronto</td>\n",
       "      <td>5.6</td>\n",
       "      <td>64620</td>\n",
       "      <td>16945</td>\n",
       "      <td>0.262225</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>142 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    neighb ID                      neighb name_x  MH_hospital_rate  \\\n",
       "0           1             West Humber-Clairville               6.5   \n",
       "1           2  Mount Olive-Silverstone-Jamestown               8.2   \n",
       "2           3       Thistletown-Beaumond Heights               7.2   \n",
       "3           4                    Rexdale-Kipling               9.9   \n",
       "4           5                   Elms-Old Rexdale               6.9   \n",
       "..        ...                                ...               ...   \n",
       "137       138                      Eglinton East               5.7   \n",
       "138       139                Scarborough Village               5.9   \n",
       "139       140                          Guildwood               4.5   \n",
       "140       NaN                    City of Toronto               5.6   \n",
       "141       NaN                    City of Toronto               5.6   \n",
       "\n",
       "     Total pop in private households  \\\n",
       "0                               1785   \n",
       "1                               1490   \n",
       "2                                530   \n",
       "3                                615   \n",
       "4                                530   \n",
       "..                               ...   \n",
       "137                             1320   \n",
       "138                              920   \n",
       "139                              740   \n",
       "140                           152065   \n",
       "141                            64620   \n",
       "\n",
       "     total_population_in_private_households_living_alone  living_alone_rate  \\\n",
       "0                                                   95             0.053221   \n",
       "1                                                  140             0.093960   \n",
       "2                                                   30             0.056604   \n",
       "3                                                  100             0.162602   \n",
       "4                                                   55             0.103774   \n",
       "..                                                 ...                  ...   \n",
       "137                                                235             0.178030   \n",
       "138                                                190             0.206522   \n",
       "139                                                115             0.155405   \n",
       "140                                              29135             0.191596   \n",
       "141                                              16945             0.262225   \n",
       "\n",
       "    abv_avg_livingalone  \n",
       "0                    No  \n",
       "1                    No  \n",
       "2                    No  \n",
       "3                    No  \n",
       "4                    No  \n",
       "..                  ...  \n",
       "137                  No  \n",
       "138                 Yes  \n",
       "139                  No  \n",
       "140                  No  \n",
       "141                 Yes  \n",
       "\n",
       "[142 rows x 7 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5fa01b70",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
      "/tmp/ipykernel_582/572317716.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2.669622331691297,\n",
       " 2.0650000000000004,\n",
       " 3.5334415584415577,\n",
       " 1.8012987012987018,\n",
       " 1.030448717948718,\n",
       " 1.322115384615385,\n",
       " 1.2650246305418724,\n",
       " 0.8679549114331726,\n",
       " 1.447115384615385,\n",
       " 2.1464285714285722,\n",
       " 1.7756978653530382,\n",
       " 1.0136363636363628,\n",
       " 4.30096618357488,\n",
       " 0.7035426731078909,\n",
       " 1.1237012987012998,\n",
       " 1.181481481481482,\n",
       " 1.543333333333334,\n",
       " 2.395999999999999,\n",
       " 0.7942307692307704,\n",
       " 1.582286634460547,\n",
       " 0.19839743589743541,\n",
       " 0.8674876847290633,\n",
       " 1.301970443349754,\n",
       " 1.8189102564102573,\n",
       " 0.31642512077294693,\n",
       " 0.18234295415959245,\n",
       " 1.1603896103896103,\n",
       " 1.3040000000000003,\n",
       " 2.045454545454544,\n",
       " 0.539935064935066,\n",
       " 1.6026272577996723,\n",
       " 0.9115942028985504,\n",
       " 2.7,\n",
       " 0.4048701298701296,\n",
       " 1.5016233766233764,\n",
       " 1.9785714285714286,\n",
       " 3.3352564102564104,\n",
       " 1.0337662337662339,\n",
       " 2.9805194805194812,\n",
       " 1.1246794871794865,\n",
       " 0.6415584415584421,\n",
       " 0.5499999999999998,\n",
       " 1.5909822866344605,\n",
       " 0.9640000000000013,\n",
       " 1.6333333333333329,\n",
       " 1.1932088285229199,\n",
       " 1.2834138486312403,\n",
       " 1.3957792207792208,\n",
       " 1.4794745484400664,\n",
       " 1.6923076923076925,\n",
       " -0.02800000000000047,\n",
       " 0.7586538461538463,\n",
       " 1.3605475040257655,\n",
       " 2.834943639291466,\n",
       " 0.5513957307060755,\n",
       " 1.337931034482759,\n",
       " 1.2681818181818176,\n",
       " 2.8827697262479877,\n",
       " 0.505208333333333,\n",
       " 0.520833333333333,\n",
       " 0.6399999999999997,\n",
       " 1.618269230769232,\n",
       " 1.1971014492753627,\n",
       " 2.1400000000000006,\n",
       " 0.7548076923076916,\n",
       " 3.072785829307568,\n",
       " 0.7085346215780994,\n",
       " 1.292307692307693,\n",
       " 0.9639999999999995,\n",
       " 2.9437499999999996,\n",
       " 0.8148148148148149,\n",
       " 1.5422003284072252,\n",
       " 0.5756843800322056,\n",
       " 1.0623973727422014,\n",
       " 0.9509031198686362,\n",
       " 0.37922705314009697,\n",
       " 2.112,\n",
       " 1.4561688311688306,\n",
       " 0.5483333333333329,\n",
       " 2.055514705882353,\n",
       " 0.730194805194806,\n",
       " 2.1699507389162562,\n",
       " 1.2386473429951694,\n",
       " 0.8029220779220783,\n",
       " 0.2791666666666668,\n",
       " 0.7999999999999998,\n",
       " 0.5246376811594207,\n",
       " 1.6794871794871797,\n",
       " 3.483766233766234,\n",
       " -0.569082125603865,\n",
       " 1.2743506493506507,\n",
       " 1.4967948717948714,\n",
       " 0.7834415584415586,\n",
       " 2.2254901960784315,\n",
       " 3.496666666666667,\n",
       " 2.109178743961353,\n",
       " 1.5097402597402585,\n",
       " 0.06891025641025728,\n",
       " 1.8761904761904757,\n",
       " 1.5668831168831172,\n",
       " 1.586666666666667,\n",
       " 2.2402576489532997,\n",
       " 1.447402597402597,\n",
       " 1.4000000000000004,\n",
       " 1.7868589743589745,\n",
       " 1.895008051529791,\n",
       " 1.732000000000001,\n",
       " 1.9154351395730709,\n",
       " 1.2847402597402597,\n",
       " 1.3159090909090914,\n",
       " 3.088455008488965,\n",
       " 0.9280000000000008,\n",
       " 0.10487012987012978,\n",
       " 1.2480769230769235,\n",
       " 1.564,\n",
       " 2.144,\n",
       " 1.4147435897435896,\n",
       " 0.6347593582887701,\n",
       " 2.008000000000001,\n",
       " 0.7786535303776683,\n",
       " 0.8834415584415574,\n",
       " 2.0348111658456487,\n",
       " 0.010950080515298666,\n",
       " 1.49551282051282,\n",
       " 0.18400000000000016,\n",
       " 0.8528846153846157,\n",
       " 3.2756944444444445,\n",
       " 0.35911330049261103,\n",
       " 2.2791171477079795,\n",
       " 1.7016103059581318,\n",
       " 2.523671497584542,\n",
       " 0.8929392446633821,\n",
       " 0.7819645732689215,\n",
       " 1.427999999999999,\n",
       " 1.3310344827586214,\n",
       " 2.2621794871794876,\n",
       " 2.358766233766234,\n",
       " 1.0552083333333329,\n",
       " 1.3120000000000003,\n",
       " 1.6581320450885668,\n",
       " 1.796180555555555,\n",
       " 0.8329371816638371,\n",
       " 1.3566666666666665,\n",
       " 0.3358974358974356,\n",
       " 2.116025641025641,\n",
       " 1.5761674718196463,\n",
       " 1.1319999999999997,\n",
       " 0.9581320450885658,\n",
       " 1.3265700483091791,\n",
       " 1.0071428571428571,\n",
       " 0.9030595813204503,\n",
       " 2.4315619967793882,\n",
       " 2.166666666666666,\n",
       " 0.6349999999999998,\n",
       " 1.7096153846153843,\n",
       " 0.022402597402597202,\n",
       " 0.9766666666666666,\n",
       " 3.830519480519479,\n",
       " 1.2181964573268926,\n",
       " 1.2880000000000011,\n",
       " 1.4066666666666672,\n",
       " 1.3942307692307683,\n",
       " 0.9715927750410502,\n",
       " -0.050324675324675106,\n",
       " 1.6732348111658455,\n",
       " 0.24262820512820493,\n",
       " 0.800641025641025,\n",
       " 2.4093596059113302,\n",
       " 0.043349753694580606,\n",
       " 0.664610389610389,\n",
       " 1.4837438423645333,\n",
       " 1.8096153846153848,\n",
       " 0.3849358974358976,\n",
       " 0.9461799660441423,\n",
       " 1.3859083191850594,\n",
       " 2.2029220779220777,\n",
       " 1.4083333333333332,\n",
       " 1.3737274220032845,\n",
       " 2.1558441558441572,\n",
       " 2.158776167471819,\n",
       " 1.791666666666667,\n",
       " 1.2350000000000003,\n",
       " 2.0462157809983905,\n",
       " 1.483574879227053,\n",
       " 0.6039999999999992,\n",
       " 2.479796264855686,\n",
       " 3.453037766830871,\n",
       " -0.05200000000000049,\n",
       " 1.9770833333333337,\n",
       " 1.9615384615384608,\n",
       " 2.291143317230274,\n",
       " 1.1743961352656997,\n",
       " 1.3419871794871794,\n",
       " 0.8805152979066024,\n",
       " 2.0285256410256407,\n",
       " 0.5237076648841361,\n",
       " 1.2898550724637685,\n",
       " 2.2714770797962647,\n",
       " 1.0301282051282046,\n",
       " 0.8040257648953304,\n",
       " 3.1519999999999992,\n",
       " 2.12,\n",
       " 2.7683333333333326,\n",
       " 1.6863636363636365,\n",
       " 0.8708333333333336,\n",
       " 1.2362179487179485,\n",
       " 1.1745571658615148,\n",
       " 1.7579710144927532,\n",
       " 2.216,\n",
       " 0.8591133004926119,\n",
       " 0.9801282051282048,\n",
       " 2.2375,\n",
       " 0.7860389610389609,\n",
       " 2.4000000000000012,\n",
       " 1.9433333333333342,\n",
       " 0.2161904761904756,\n",
       " 1.8599999999999994,\n",
       " 1.5852564102564095,\n",
       " 1.5420289855072458,\n",
       " 0.9220032840722503,\n",
       " 1.7964285714285717,\n",
       " 0.7256410256410257,\n",
       " 1.7876061120543296,\n",
       " 3.1439999999999992,\n",
       " 0.0845410628019323,\n",
       " 1.3317307692307683,\n",
       " 1.7814102564102559,\n",
       " 1.8289855072463768,\n",
       " 0.7236714975845411,\n",
       " 0.25555555555555554,\n",
       " 1.8863636363636376,\n",
       " 0.6179487179487184,\n",
       " 1.9299999999999997,\n",
       " 0.7360708534621576,\n",
       " 2.798397435897436,\n",
       " 1.0949999999999998,\n",
       " 1.003333333333333,\n",
       " 1.525320512820513,\n",
       " 0.985897435897436,\n",
       " 1.773376623376624,\n",
       " 1.525779967159277,\n",
       " 0.7680000000000007,\n",
       " 1.9339743589743597,\n",
       " 1.7000000000000002,\n",
       " 2.1383333333333328,\n",
       " 0.44647435897435805,\n",
       " 0.6679999999999993,\n",
       " 1.5644230769230765,\n",
       " 2.0999999999999996,\n",
       " 2.0466988727858304,\n",
       " 0.668333333333333,\n",
       " 1.6999999999999993,\n",
       " 0.8600000000000003,\n",
       " 1.048263888888889,\n",
       " 1.5694805194805195,\n",
       " 1.335,\n",
       " 1.0481481481481474,\n",
       " 1.5479999999999992,\n",
       " 0.504545454545454,\n",
       " 2.076602564102564,\n",
       " 1.924025974025973,\n",
       " 0.3711538461538453,\n",
       " 0.8429487179487181,\n",
       " 0.2490968801313631,\n",
       " 0.7665534804753822,\n",
       " 0.8566666666666665,\n",
       " 1.3629870129870136,\n",
       " 2.156978653530378,\n",
       " 1.075961538461538,\n",
       " 1.4095238095238098,\n",
       " 1.9320000000000004,\n",
       " 1.3933333333333335,\n",
       " 1.4316666666666666,\n",
       " 1.6865384615384622,\n",
       " 1.8946859903381643,\n",
       " 1.9093596059113302,\n",
       " 2.3701923076923084,\n",
       " 2.1617405582922817,\n",
       " 0.9291666666666671,\n",
       " 1.8165861513687602,\n",
       " 0.4317307692307679,\n",
       " 0.8942528735632189,\n",
       " 0.7799660441426157,\n",
       " 0.46763285024154566,\n",
       " 2.079999999999999,\n",
       " 0.7607142857142861,\n",
       " 2.080448717948718,\n",
       " 0.9028846153846155,\n",
       " 1.2993589743589746,\n",
       " 1.1396825396825392,\n",
       " 0.8538587848932675,\n",
       " 0.8935064935064938,\n",
       " 2.0425324675324683,\n",
       " 1.0724137931034479,\n",
       " 0.6774305555555555,\n",
       " 2.6126623376623384,\n",
       " 0.7041867954911432,\n",
       " 1.5461038961038955,\n",
       " 0.44833333333333236,\n",
       " 0.43194444444444446,\n",
       " 0.9378205128205126,\n",
       " 1.6836538461538462,\n",
       " 0.7000000000000002,\n",
       " 1.1172905525846701,\n",
       " 1.7104761904761903,\n",
       " 1.1715927750410513,\n",
       " 0.6688311688311677,\n",
       " 1.4964573268921093,\n",
       " 0.1787439613526578,\n",
       " 0.8916264090177126,\n",
       " 1.1012987012987017,\n",
       " 1.7359999999999998,\n",
       " 2.4079999999999995,\n",
       " 0.7422077922077932,\n",
       " 0.5295454545454543,\n",
       " 0.2159999999999993,\n",
       " 0.06489533011272197,\n",
       " 2.6766830870279144,\n",
       " 2.7384615384615385,\n",
       " 2.6737012987012987,\n",
       " 2.533333333333333,\n",
       " 2.4980519480519474,\n",
       " 1.4876061120543298,\n",
       " 1.8483333333333336,\n",
       " 2.3629870129870136,\n",
       " 0.9646859083191854,\n",
       " 1.6454545454545455,\n",
       " 1.4762820512820518,\n",
       " 1.4727272727272727,\n",
       " 2.401477832512316,\n",
       " 1.0087027914614124,\n",
       " 1.410763888888889,\n",
       " 2.2119999999999997,\n",
       " 1.6460547504025778,\n",
       " 0.5920000000000005,\n",
       " 1.9467948717948715,\n",
       " 1.3897435897435901,\n",
       " 2.4852292020373516,\n",
       " 2.6083333333333343,\n",
       " 0.8383333333333329,\n",
       " 1.3191626409017712,\n",
       " 0.40128824476650493,\n",
       " 1.6128205128205124,\n",
       " 0.12275641025641004,\n",
       " 1.6433333333333335,\n",
       " 1.509615384615385,\n",
       " 2.4479999999999986,\n",
       " 1.347290640394089,\n",
       " 1.2285256410256409,\n",
       " 1.0334943639291474,\n",
       " 2.2429487179487184,\n",
       " 1.615435139573071,\n",
       " 2.5218390804597695,\n",
       " 1.6640000000000006,\n",
       " 1.2391025641025646,\n",
       " 1.1624999999999996,\n",
       " 1.1759615384615376,\n",
       " 1.9804487179487182,\n",
       " 0.3855500821018065,\n",
       " 1.3512820512820518,\n",
       " 1.85576923076923,\n",
       " 1.7006944444444452,\n",
       " 2.0680000000000005,\n",
       " 2.1111111111111116,\n",
       " 1.8314102564102557,\n",
       " 2.5478260869565217,\n",
       " 1.7080000000000002,\n",
       " 1.9384236453201975,\n",
       " 0.4701298701298704,\n",
       " 1.574358974358975,\n",
       " 1.2570048309178743,\n",
       " 1.7786764705882359,\n",
       " 2.291666666666667,\n",
       " 1.8200000000000003,\n",
       " 1.3346153846153852,\n",
       " 2.121666666666666,\n",
       " 2.4175324675324683,\n",
       " 2.0759999999999996,\n",
       " 1.789423076923077,\n",
       " 0.9376623376623368,\n",
       " -0.019999999999999574,\n",
       " 0.4483974358974354,\n",
       " 0.7559999999999993,\n",
       " 2.6457326892109503,\n",
       " 2.9701298701298704,\n",
       " 0.7581168831168839,\n",
       " 1.7363636363636372,\n",
       " 2.647435897435898,\n",
       " 0.43333333333333446,\n",
       " 2.3678160919540234,\n",
       " 0.8520000000000003,\n",
       " 1.596000000000001,\n",
       " 2.831666666666667,\n",
       " 1.9146167557932259,\n",
       " 1.5201923076923078,\n",
       " 1.1960000000000006,\n",
       " 1.0149999999999997,\n",
       " 1.4311986863711006,\n",
       " 2.004545454545454,\n",
       " 0.7888888888888888,\n",
       " 3.0098228663446056,\n",
       " 2.073376623376623,\n",
       " 1.035576923076924,\n",
       " 1.851851851851852,\n",
       " 0.9284072249589492,\n",
       " 1.64384236453202,\n",
       " 2.2519480519480517,\n",
       " 2.3669871794871806,\n",
       " 0.8979066022544293,\n",
       " 0.895566502463053,\n",
       " 1.363782051282051,\n",
       " 1.5683333333333334,\n",
       " 2.178333333333333,\n",
       " 0.8810897435897438,\n",
       " 1.1730769230769242,\n",
       " 2.4900641025641015,\n",
       " 0.23012820512820475,\n",
       " 1.0400656814449913,\n",
       " 0.7952380952380951,\n",
       " 1.290064102564103,\n",
       " 0.7234295415959249,\n",
       " 0.4875000000000007,\n",
       " 1.2583333333333329,\n",
       " 1.130377668308702,\n",
       " 0.7707717569786539,\n",
       " 1.5409017713365536,\n",
       " 0.5564102564102571,\n",
       " 0.9639999999999995,\n",
       " 1.8123376623376632,\n",
       " 0.9743961352657005,\n",
       " 0.4833333333333334,\n",
       " 0.9600985221674883,\n",
       " 0.575961538461538,\n",
       " -0.14057971014492843,\n",
       " 1.8769726247987117,\n",
       " 0.866505636070853,\n",
       " 1.4079999999999995,\n",
       " 1.1883116883116882,\n",
       " 1.3249589490968798,\n",
       " 2.3849358974358967,\n",
       " 3.0740259740259743,\n",
       " 0.12954545454545396,\n",
       " 3.3022435897435907,\n",
       " 0.8279999999999994,\n",
       " 2.919185059422751,\n",
       " 1.3208333333333329,\n",
       " 2.6564102564102567,\n",
       " 1.6149425287356323,\n",
       " 1.4347402597402583,\n",
       " 0.4999999999999991,\n",
       " 1.340064102564103,\n",
       " 2.056597222222222,\n",
       " 1.516319444444444,\n",
       " 0.8099358974358966,\n",
       " 1.086666666666667,\n",
       " 1.12275641025641,\n",
       " 1.4597402597402596,\n",
       " 2.241062801932367,\n",
       " 1.5534621578099843,\n",
       " 1.0316666666666672,\n",
       " 3.008974358974359,\n",
       " 1.685256410256411,\n",
       " 1.2983766233766234,\n",
       " 1.2846153846153854,\n",
       " 2.0051948051948054,\n",
       " 1.7878205128205131,\n",
       " 3.3022727272727277,\n",
       " 0.8826923076923077,\n",
       " 1.379286926994907,\n",
       " 0.7374999999999998,\n",
       " 2.032467532467532,\n",
       " 2.361038961038961,\n",
       " 0.7600000000000007,\n",
       " 1.219551282051282,\n",
       " 1.0740740740740744,\n",
       " 0.21396103896103913,\n",
       " 1.008,\n",
       " 0.4762820512820518,\n",
       " 1.6768115942028992,\n",
       " 2.2665056360708533,\n",
       " 1.150649350649351,\n",
       " 1.8464285714285706,\n",
       " 3.950903119868637,\n",
       " 1.2199999999999998,\n",
       " 1.2620129870129873,\n",
       " 1.038782051282051,\n",
       " 1.1032051282051292,\n",
       " 2.004186795491143,\n",
       " -0.3077294685990335,\n",
       " 0.958333333333333,\n",
       " 2.0798701298701294,\n",
       " 2.05330112721417,\n",
       " 1.405254515599343,\n",
       " 2.634999999999999,\n",
       " 2.2559934318555017,\n",
       " 0.8666666666666671,\n",
       " 1.511822660098523,\n",
       " 0.6581168831168824,\n",
       " 1.416666666666666,\n",
       " 0.6324675324675315,\n",
       " 1.9840000000000009,\n",
       " 1.515705128205128,\n",
       " 0.9433172302737507,\n",
       " 1.700492610837439,\n",
       " 0.831818181818182,\n",
       " 1.0819645732689223,\n",
       " 1.484,\n",
       " 0.8820512820512825,\n",
       " 0.9252818035426733,\n",
       " 0.2264090177133653,\n",
       " 1.0605475040257648,\n",
       " 2.1495894909688014,\n",
       " 2.1358974358974354,\n",
       " 0.5769230769230775,\n",
       " 0.459903381642512,\n",
       " 0.5663461538461547,\n",
       " 1.4246794871794872,\n",
       " 2.0950000000000006,\n",
       " 0.6967159277504109,\n",
       " 1.5191558441558444,\n",
       " 1.6189102564102562,\n",
       " 0.6382594417077181,\n",
       " 1.1887278582930758,\n",
       " 1.690584415584416,\n",
       " 1.3504025764895333,\n",
       " 0.20399999999999974,\n",
       " 3.8520525451559946,\n",
       " 1.4711755233494364,\n",
       " 1.2596059113300502,\n",
       " 1.9735632183908045,\n",
       " 2.608766233766234,\n",
       " 0.7878205128205122,\n",
       " 0.5879456706281836,\n",
       " 2.075,\n",
       " 1.1227272727272721,\n",
       " 2.3439999999999994,\n",
       " 1.270138888888889,\n",
       " 1.551207729468599,\n",
       " 1.8045454545454547,\n",
       " 1.7439999999999998,\n",
       " 0.05200000000000049,\n",
       " 1.8605769230769234,\n",
       " 1.9852564102564108,\n",
       " 1.570129870129871,\n",
       " 0.7674023769100167,\n",
       " 0.9516233766233766,\n",
       " 0.505314009661836,\n",
       " 1.4679549114331722,\n",
       " 1.7120000000000006,\n",
       " 1.1340909090909088,\n",
       " 2.5633333333333335,\n",
       " 2.375,\n",
       " 1.331089743589743,\n",
       " 2.326666666666667,\n",
       " 0.1535256410256416,\n",
       " 1.3928571428571432,\n",
       " 0.07572156196943869,\n",
       " 1.3180354267310799,\n",
       " 2.2399999999999993,\n",
       " 0.8652777777777771,\n",
       " 1.161352657004831,\n",
       " 1.237359098228663,\n",
       " 2.0151368760064416,\n",
       " 0.9896940418679554,\n",
       " 0.5983333333333327,\n",
       " 0.9764895330112724,\n",
       " 0.0012987012987020208,\n",
       " 1.671666666666666,\n",
       " 0.06799999999999962,\n",
       " 3.466233766233766,\n",
       " 1.4705128205128206,\n",
       " 3.0666666666666664,\n",
       " 2.008,\n",
       " 1.2379870129870127,\n",
       " 0.8269230769230766,\n",
       " 1.220779220779221,\n",
       " 1.2504456327985745,\n",
       " 1.1303904923599326,\n",
       " -0.3518716577540104,\n",
       " 1.0711538461538463,\n",
       " 1.5474025974025976,\n",
       " -0.11666666666666714,\n",
       " 1.5509615384615376,\n",
       " 0.8120772946859898,\n",
       " 1.6559999999999997,\n",
       " 0.28108974358974415,\n",
       " 1.3198067632850234,\n",
       " 1.1508856682769721,\n",
       " 3.1782051282051276,\n",
       " 1.3200000000000003,\n",
       " 1.5750000000000002,\n",
       " 1.1059113300492607,\n",
       " -0.0813204508856682,\n",
       " 1.411538461538461,\n",
       " 1.9602564102564104,\n",
       " 1.821739130434783,\n",
       " 1.166183574879228,\n",
       " 1.0675324675324678,\n",
       " 2.2874999999999996,\n",
       " 1.7000000000000002,\n",
       " 0.4220611916264092,\n",
       " 1.31239388794567,\n",
       " 1.171153846153846,\n",
       " 2.0520000000000005,\n",
       " 1.0121794871794876,\n",
       " 0.7116666666666669,\n",
       " 1.6559999999999997,\n",
       " 0.15811688311688332,\n",
       " 1.7865384615384619,\n",
       " 1.1048076923076922,\n",
       " 0.8012820512820511,\n",
       " 1.7983333333333338,\n",
       " 2.7610389610389605,\n",
       " 0.4892361111111114,\n",
       " 2.171980676328502,\n",
       " 0.579066022544283,\n",
       " 1.413782051282051,\n",
       " 2.8640000000000008,\n",
       " 1.9273752012882444,\n",
       " 1.2759999999999998,\n",
       " 1.1697262479871178,\n",
       " 0.6730158730158733,\n",
       " 0.8405797101449277,\n",
       " 1.8733974358974361,\n",
       " 1.0564935064935064,\n",
       " 0.31599999999999984,\n",
       " 0.3274220032840729,\n",
       " 0.36586151368760156,\n",
       " 1.8081168831168828,\n",
       " 1.3516666666666666,\n",
       " 0.721794871794871,\n",
       " 0.8392914653784223,\n",
       " 1.5577996715927744,\n",
       " 2.3448275862068977,\n",
       " 0.6200000000000001,\n",
       " 0.8962233169129723,\n",
       " 2.212662337662339,\n",
       " 0.8766025641025639,\n",
       " 0.9714743589743593,\n",
       " 0.7567062818336163,\n",
       " 1.467307692307692,\n",
       " 1.3900000000000006,\n",
       " 1.6967532467532456,\n",
       " 1.7160000000000002,\n",
       " 0.7604166666666661,\n",
       " 2.5733990147783246,\n",
       " 0.7928571428571436,\n",
       " 1.7062397372742195,\n",
       " 0.24155844155844086,\n",
       " 1.6724025974025984,\n",
       " 1.8532467532467534,\n",
       " 1.2968801313628902,\n",
       " 2.34679802955665,\n",
       " 1.8048076923076923,\n",
       " 1.904761904761905,\n",
       " 1.356521739130434,\n",
       " 1.1169082125603866,\n",
       " 1.1083333333333334,\n",
       " 1.7392914653784208,\n",
       " 1.4559999999999995,\n",
       " 1.42,\n",
       " 1.8886363636363637,\n",
       " 1.3380952380952387,\n",
       " 0.5374384236453196,\n",
       " 1.9951298701298699,\n",
       " 0.5173076923076918,\n",
       " 1.7716666666666674,\n",
       " 3.331666666666666,\n",
       " 2.133661740558292,\n",
       " 0.29732620320855574,\n",
       " 2.502093397745571,\n",
       " 1.2633116883116884,\n",
       " 1.104166666666667,\n",
       " 0.33499999999999996,\n",
       " 1.3845648604269298,\n",
       " 1.7227564102564106,\n",
       " 2.9800000000000004,\n",
       " 2.411538461538462,\n",
       " 1.5336538461538458,\n",
       " 0.6159999999999997,\n",
       " 1.5307692307692307,\n",
       " 2.193558776167473,\n",
       " 0.6836538461538462,\n",
       " 1.5019323671497586,\n",
       " 0.9003205128205121,\n",
       " 0.7894909688013136,\n",
       " 3.347181964573269,\n",
       " 0.9927083333333329,\n",
       " 2.408653846153846,\n",
       " 1.0712643678160916,\n",
       " 1.887999999999999,\n",
       " 1.0759999999999996,\n",
       " 1.0605475040257648,\n",
       " 1.6079999999999997,\n",
       " 0.9871794871794872,\n",
       " 0.2582887700534764,\n",
       " 0.28589743589743666,\n",
       " 0.6482173174872665,\n",
       " 0.6734299516908209,\n",
       " 2.108653846153846,\n",
       " 0.5493589743589746,\n",
       " 0.5879999999999992,\n",
       " 1.564895330112721,\n",
       " 0.9129870129870126,\n",
       " 0.772141706924315,\n",
       " 0.623993558776168,\n",
       " 1.5570512820512823,\n",
       " 2.520128824476652,\n",
       " 1.7365539452495975,\n",
       " 2.10445632798574,\n",
       " 0.6872785829307562,\n",
       " 0.889694041867954,\n",
       " 1.6852564102564092,\n",
       " 3.5019230769230774,\n",
       " 0.9483766233766229,\n",
       " 1.710180623973728,\n",
       " 0.8220713073005097,\n",
       " 1.5582930756843805,\n",
       " 1.2791171477079795,\n",
       " 2.1720142602495542,\n",
       " 1.6665534804753817,\n",
       " 1.388,\n",
       " 1.250563607085347,\n",
       " 0.7559999999999993,\n",
       " 0.5987012987012994,\n",
       " 1.3480475382003405,\n",
       " 0.5557692307692301,\n",
       " 0.5253246753246748,\n",
       " 1.532000000000001,\n",
       " 1.6099358974358982,\n",
       " 0.45737179487179436,\n",
       " 2.1668831168831177,\n",
       " 0.2503205128205135,\n",
       " 1.262157809983897,\n",
       " 1.1669871794871796,\n",
       " 0.7594155844155841,\n",
       " 1.905448717948718,\n",
       " 1.0136876006441238,\n",
       " 2.3438311688311684,\n",
       " 0.23199999999999932,\n",
       " 0.15200000000000014,\n",
       " 1.8066666666666675,\n",
       " 1.4814814814814818,\n",
       " -0.33499999999999996,\n",
       " 1.028985507246376,\n",
       " 1.0520000000000005,\n",
       " 0.3200000000000003,\n",
       " 1.085385878489327,\n",
       " 2.564895330112721,\n",
       " 0.7647435897435901,\n",
       " 0.0188311688311682,\n",
       " 1.828205128205128,\n",
       " 1.476683087027915,\n",
       " 1.3107890499194852,\n",
       " 2.383579638752054,\n",
       " 1.1840000000000002,\n",
       " 2.8867954911433173,\n",
       " 1.5740384615384615,\n",
       " 2.829487179487179,\n",
       " 2.039935064935065,\n",
       " 0.19200000000000017,\n",
       " 0.7583333333333329,\n",
       " 1.414009661835749,\n",
       " 2.6483333333333343,\n",
       " 0.6299999999999999,\n",
       " 1.6278438030560274,\n",
       " 1.3188405797101455,\n",
       " -0.11698717948717974,\n",
       " 0.1880000000000006,\n",
       " 2.1912337662337666,\n",
       " 1.2240000000000002,\n",
       " 1.0919871794871794,\n",
       " 1.3410628019323676,\n",
       " 1.6636363636363631,\n",
       " 0.9249999999999998,\n",
       " 0.30993589743589833,\n",
       " 2.323076923076923,\n",
       " 1.291666666666666,\n",
       " 0.9961805555555552,\n",
       " 3.473076923076923,\n",
       " 1.436070853462157,\n",
       " 1.1573717948717945,\n",
       " 2.412,\n",
       " 0.3298611111111107,\n",
       " 1.1103896103896096,\n",
       " 1.1173913043478256,\n",
       " 2.5383252818035436,\n",
       " 1.8372742200328407,\n",
       " 0.5004926108374388,\n",
       " 1.7341543513957296,\n",
       " 1.4101604278074866,\n",
       " 1.1669871794871796,\n",
       " 1.398522167487684,\n",
       " 0.9543513957307059,\n",
       " 1.1926108374384237,\n",
       " 2.0603896103896107,\n",
       " 0.19600000000000062,\n",
       " 0.506730769230769,\n",
       " 0.6849999999999996,\n",
       " 0.6820512820512814,\n",
       " 2.7616666666666667,\n",
       " 0.5604269293924462,\n",
       " -0.22499999999999964,\n",
       " 2.252,\n",
       " 0.42534722222222143,\n",
       " 1.831999999999999,\n",
       " 2.3560000000000008,\n",
       " 0.3396103896103897,\n",
       " 1.2839999999999998,\n",
       " 1.266319444444445,\n",
       " 2.649758454106281,\n",
       " 0.39096880131362877,\n",
       " 1.7249999999999996,\n",
       " 0.7360000000000007,\n",
       " 1.9080000000000004,\n",
       " 1.6020373514431228,\n",
       " 0.44753820033955805,\n",
       " 0.4678571428571434,\n",
       " 1.4178571428571427,\n",
       " 2.51755233494364,\n",
       " 1.415,\n",
       " 0.9070512820512819,\n",
       " 1.5200000000000005,\n",
       " 2.2816666666666663,\n",
       " 2.7681818181818176,\n",
       " 1.042673107890499,\n",
       " 1.8506410256410257,\n",
       " 1.8915584415584412,\n",
       " 1.064000000000001,\n",
       " -0.12721417069243124,\n",
       " 2.4587436332767405,\n",
       " 2.319868637110016,\n",
       " 2.554187192118225,\n",
       " 1.2392361111111114,\n",
       " 0.5022435897435891,\n",
       " 2.668921095008052,\n",
       " 1.0216666666666665,\n",
       " 1.459999999999999,\n",
       " 1.7350000000000003,\n",
       " 1.0451923076923073,\n",
       " 2.9163461538461544,\n",
       " -0.385229202037352,\n",
       " 3.328502415458935,\n",
       " 2.3605475040257646,\n",
       " 1.6066666666666674,\n",
       " 0.3466666666666667,\n",
       " 1.0168831168831165,\n",
       " 1.735897435897435,\n",
       " 1.4190476190476193,\n",
       " 1.12051282051282,\n",
       " 1.6766233766233771,\n",
       " 0.3266233766233766,\n",
       " 2.1967741935483875,\n",
       " 2.7789049919484707,\n",
       " 0.48555008210180617,\n",
       " 2.4040998217468816,\n",
       " 3.0487179487179485,\n",
       " 1.152000000000001,\n",
       " 0.44675324675324735,\n",
       " 1.434740259740261,\n",
       " 1.6280000000000001,\n",
       " 1.8499999999999996,\n",
       " 1.0050000000000008,\n",
       " 1.6896551724137927,\n",
       " -0.04350649350649416,\n",
       " 0.6120772946859905,\n",
       " 1.5133004926108375,\n",
       " 1.6450885668276962,\n",
       " 0.28499999999999925,\n",
       " 1.8012882447665053,\n",
       " 2.8397435897435903,\n",
       " 0.9800000000000004,\n",
       " 1.7581320450885665,\n",
       " 2.018506493506494,\n",
       " 1.8285714285714292,\n",
       " 1.638647342995169,\n",
       " 1.7075684380032206,\n",
       " 1.8399999999999999,\n",
       " 0.7855500821018051,\n",
       " 1.1711038961038964,\n",
       " 0.7609195402298843,\n",
       " 1.2977564102564099,\n",
       " 1.5003246753246753,\n",
       " 1.92,\n",
       " 1.6386363636363637,\n",
       " 1.1792207792207785,\n",
       " -0.10000000000000053,\n",
       " 0.6009852216748772,\n",
       " 1.400961538461539,\n",
       " 1.6620129870129867,\n",
       " 1.0169871794871792,\n",
       " 1.304597701149425,\n",
       " 0.6098522167487674,\n",
       " 1.611038961038961,\n",
       " 1.709983896940419,\n",
       " 1.3602254428341372,\n",
       " 0.888964346349745,\n",
       " 2.982173174872665,\n",
       " 1.0009615384615387,\n",
       " 1.7272577996715919,\n",
       " 0.9798701298701298,\n",
       " 1.9990384615384613,\n",
       " 0.9169871794871787,\n",
       " 0.23666666666666725,\n",
       " 0.6798076923076923,\n",
       " 2.626929392446634,\n",
       " 2.0133056133056133,\n",
       " 0.8315270935960601,\n",
       " 1.405448717948718,\n",
       " 2.0042207792207787,\n",
       " -0.42003395585738534,\n",
       " 0.9579710144927542,\n",
       " 0.14967948717948776,\n",
       " 2.114614121510673,\n",
       " 0.3586452762923349,\n",
       " 1.242028985507245,\n",
       " 1.3025764895330108,\n",
       " 0.5762987012987022,\n",
       " 1.548,\n",
       " 1.6052083333333327,\n",
       " 3.017207792207792,\n",
       " 0.01180555555555518,\n",
       " 1.014814814814815,\n",
       " 2.4450000000000003,\n",
       " 2.8589743589743577,\n",
       " 1.572115384615385,\n",
       " 0.3461805555555557,\n",
       " 2.259615384615384,\n",
       " 2.0961038961038962,\n",
       " 1.564285714285715,\n",
       " 1.759999999999999,\n",
       " 1.663782051282051,\n",
       " 0.8761904761904757,\n",
       " 1.0538461538461537,\n",
       " 2.4560000000000004,\n",
       " 0.9149350649350652,\n",
       " 2.125324675324676,\n",
       " 2.150320512820513,\n",
       " 0.9320000000000004,\n",
       " 1.47435064935065,\n",
       " 0.8396103896103897,\n",
       " 1.1974358974358967,\n",
       " 0.047368421052631504,\n",
       " 1.3144230769230765,\n",
       " 0.8775641025641026,\n",
       " 0.988141025641025,\n",
       " 2.6516666666666673,\n",
       " 1.767471819645733,\n",
       " 0.16720779220779214,\n",
       " 1.7720000000000002,\n",
       " 2.0261460101867588,\n",
       " 0.9657004830917879,\n",
       " 2.0402597402597413,\n",
       " 2.4190016103059575,\n",
       " 1.5479999999999992,\n",
       " 0.5512987012987018,\n",
       " 0.21336553945249648,\n",
       " 0.042995169082126417,\n",
       " 2.05,\n",
       " 2.4080000000000013,\n",
       " 1.8344155844155852,\n",
       " 0.8047619047619055,\n",
       " 1.532000000000001,\n",
       " 1.7926282051282056,\n",
       " -0.41999999999999993,\n",
       " 0.5980295566502472,\n",
       " 0.6451559934318549,\n",
       " 1.0034482758620689,\n",
       " 1.5291465378421902,\n",
       " 2.041883116883116,\n",
       " 1.2865384615384619,\n",
       " 2.3666666666666663,\n",
       " 1.4467948717948724,\n",
       " 0.26468590831918526,\n",
       " 1.9666666666666668,\n",
       " 2.532051282051282,\n",
       " 0.36570458404074735,\n",
       " 2.1883333333333335,\n",
       " 2.388961038961039,\n",
       " 2.182531194295901,\n",
       " 1.2880000000000003,\n",
       " 2.068831168831169,\n",
       " 2.0653530377668305,\n",
       " 1.1257799671592776,\n",
       " 0.5397283531409167,\n",
       " 1.3016233766233762,\n",
       " 0.2738539898132428,\n",
       " 2.0860780984719858,\n",
       " 2.273376623376623,\n",
       " 1.2660225442834143,\n",
       " 0.8178571428571431,\n",
       " 0.8250000000000002,\n",
       " 1.7011029411764707,\n",
       " 2.7871175523349434,\n",
       " 1.6497453310696102,\n",
       " 0.8454545454545457,\n",
       " 0.6851851851851851,\n",
       " 0.6201388888888886,\n",
       " 2.1512820512820516,\n",
       " 0.940418679549115,\n",
       " ...]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mhadmission_sample_mean = merged_new.sample(50, replace = True).groupby('abv_avg_livingalone')['MH_hospital_rate'].mean() #merged_new is grouped by 'abv_avg_livingalone', a sample of 50 is taken that allows for replacement, and then the mean of each group is calculated\n",
    "bootstrap_means = [] #empty list to collect means\n",
    "for _ in range(5000): # calcualte mean of 50 different samples wit replacement\n",
    "    mhadmission_sample_mean = merged_new.sample(50, replace = True).groupby('abv_avg_livingalone')['MH_hospital_rate'].mean()\n",
    "    bootstrap_means.append(mhadmission_sample_mean[1] - mhadmission_sample_mean[0]) # the difference of means between the 2 groups (yes and no) appended to the list\n",
    "bootstrap_means\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da38fbb5",
   "metadata": {},
   "source": [
    "In the code above, I grouped the mental health admission rate variable by the 2 categories; above average living alone vs below average living alone rate, indicated by yes or no in each row. Then, I derived the mean for both groups. Since I am interested in taking bootstrap means, I take a sample of 50 communities from the data for each sample. I have also made sure to allow for replacenment so that communities picked by random when sampling can be picked again.\n",
    "\n",
    "In this scenario, a bootstrap mean is only necessary because I am interested in making a confidence interval for the distribution of the difference of the mean between the 2 groups. This is needed to test my null hypothesis. So I resample repeatedly from the same population to derive bootstrap means. However,since my population of 142 communities is small I can and will also calculate the difference of the means for the population.\n",
    "\n",
    "\n",
    "In the for loop, I take 5000 different samples with replacement of size 50 communities. With each one of these samples, I follow by calculating the difference in the means between the 2 groups (yes and no). This calculated mean difference is then added to my bootstrap_means list. This list contains all 5000 of the bootstrap mean differences taken from the sample of 50. Essentially, what the difference; or the values in the list, represent are the difference between the menthal health related hospital admission rate of communities that have below avg rates of living alone among private households when compared to Toronto communities with above average rates.\n",
    "\n",
    "\n",
    "For instance, the output in the cell below shows that, taking into account all the Toronto communities (population), communities with below avg rates of living alone among private households have on average 4.96 people per 1000 admitted into hospital for mental health reasons. On the other hand, in communities with above average living alone rates, there are on average 6.38 people admitted into hospital for mental health reasons. This represents a mean difference of 1.42 people per 1000 between the 2 categories. In other words, on average, communities with above average living alone rates have 1.42 more people per 1000 hospitalized for mental health reasons. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a4d51fe5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abv_avg_livingalone\n",
      "No     4.964789\n",
      "Yes    6.381690\n",
      "Name: MH_hospital_rate, dtype: float64\n",
      "1.4169014084507046\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_582/2684385455.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  mh_diff = mhadmission_mean[1] - mhadmission_mean[0] # differecne in the mean\n"
     ]
    }
   ],
   "source": [
    "# Explanation for this code found above\n",
    "mhadmission_mean = merged_new.groupby('abv_avg_livingalone')['MH_hospital_rate'].mean() # group by 'abv_avg_livingalone' and calculate MH_hospital rate mean for both groups\n",
    "print(mhadmission_mean)\n",
    "mh_diff = mhadmission_mean[1] - mhadmission_mean[0] # differecne in the mean\n",
    "print(mh_diff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7643532f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of the difference in mean MH hospistal adm rates between communities with abv and below avg liv alone rates')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.hist(bootstrap_means, bins = 50, edgecolor = 'black', color = 'yellow', density = True)\n",
    "plt.xlabel('the difference of the mean')\n",
    "plt.ylabel('density')\n",
    "plt.title('Distribution of the difference in mean MH hospistal adm rates between communities with abv and below avg liv alone rates')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e7ca99",
   "metadata": {},
   "source": [
    "In the cell above, I created a histogram to better visualize the distribution of the values in my list bootstrap_means. So the graph above plots the distribution of the difference in the means between the above average living alone rate communities and the below average living alone rate communities. What can be seen is that from the 5000 samples of size 50 taken from our original dataset, the bulk of mean differences tended to fall around ~1-2. So the median difference between Toronto communities with above average living alone rates vs below average, is somewhere between 1 and 2 people per 1000 based on a sample size of 5000. At times, the difference could be as high as ~4.5 people per 1000 or as small as ~ -0.5 people per 1000. The latter actually indicates that in a few of the 5000 samples, communities with below average living alone rates had a higher mean mental health hospital admission rate, hence why the difference is negative."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38aa60c2",
   "metadata": {},
   "source": [
    "### 95% Confidence Interval for the mean difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "999bf551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.051931884057971535, 3.0666666666666664)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.percentile(bootstrap_means, 2.5), np.percentile(bootstrap_means, 97.5)  # creates an interval from 2.5th percentile to the 97.5th percentile"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c154a8eb",
   "metadata": {},
   "source": [
    "It was stated in the Null hypothesis that there is no difference in the average mental health hospital admission rate between Toronto communities with and without above average rates of living alone among private households. According to our 95% confidence interval though this does not seem to be the case. With a sample size of 5000, I can say with 95% confidence that the mean difference in mental health related hopsital admission rates between Toronto communities with above average living alone rates vs below average falls between ~0.06 people per 1000 and ~3.017 people per 1000. Since zero, or a mean difference of zero, is not on this interval, I can reject the null hypothesis and accept the alternative hypothesis. So according to our Alternative hypothesis, it is again the case that Toronto communities with above average rates of living alone among private households have higher rates of mental health related hospital admissions. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa0523e5",
   "metadata": {},
   "source": [
    "## Step 6. Conclusion and Limitations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "751b6aa0",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "Retouch below again on the three methods used to explore the relationship between the 2 variables: Toronto communities' mental health and addiction related hospital admission rates vs living alone rates among private households in these communities.\n",
    "\n",
    "simple regression: I determined according to this method that there was a strongly positve relationship between living alone rates among private households and the rate of mental health related hospital admission in said community. This was understood through the large positive slope for the regression equation and positvely sloping line of best fit for the scatterplot measuring correlation between living alone rates for private households and mental health hospitalization rate among Toronto communities in 2016.\n",
    "\n",
    "Correlation of Coefficient (R^2): I determined according to this method that there was a modest level of explanation of the response variable by the explanatory variable, considering the context of the data (i.e, the data is observatory and not controlled for). \n",
    "\n",
    "Null hypothesis: It was stated in the Null hypothesis that there is no difference in the average mental health hospital admission rate between Toronto communities with and without above average rates of living alone among private households. According to the 95% confidence based on 5000 samples of size 50 communities, I determined that this was not the case. Judging from the interval, I was able to determine with 95% confidence that, in this context, there was a difference in the mean mental health hospitalization rates between Toronto communities with above and below average rates of living alone. Thus, the Null hypothesis was rejected in favor of the alternative hypothesis; that there is a difference between the 2 groups. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "955ddbce",
   "metadata": {},
   "source": [
    "##### Practical Significance and overall interpretation of my results\n",
    "\n",
    "The results of my analysis make logical sense. Humans are by their nature social creatures. They rely on others to care for them physically and as an outlet for emotional aspects of character. Living alone then, more often than not, entails several difficulties. You have no one to talk to when you come home from work. You have no one to help you when sick, in physical pain, or tired. Generally, as well, self-esteem may be impacted as you see others having company but yourself being alone. This is just my own specualtion however, based on snippets of information, experiences, and words I have collected in my mind over the years. To determine if my thinking is based in reality though, I will cite some sources that back my claims.\n",
    "\n",
    "Source 1: National library of Medicine. In an article titled, 'The Loneliness–Life Satisfaction Relationship', the article presents a comprehensive study investigating the effects of the COVID-19 pandemic on psychological well-being, with a specific focus on loneliness, hopelessness, depression, ego-resilience, and life satisfaction among university students in South Africa during the national lockdown from March to June 2020. one of the key takeways is that loneliness, exacerbated by social distancing and lockdown measures, was identified as a significant predictor of depression, hopelessness, and reduced life satisfaction. Further, the study finds that these variables influence eachother in very complex ways with, for instance,  loneliness leading to hopelessness, which in turn leads to depression. All this, indicates causation between living alone and mental health outcomes (i.e, increased incidene of depression). However, the study, while insightful, was cross-sectional and relied on self-reported data, which potentially introduces bias.\n",
    "\n",
    "Source 2: Frontiers in Psychiatry. In an article titled, 'Assessment of the relationship between living alone and the risk of depression based...', researchers found that individuals living alone have a 42% increased risk of developing depression compared to those who do not live alone. This finding is consistent with the source 1 cross-sectional study but is now supported by longitudinal data, suggesting a stronger evidence base for this association. The review included seven studies, encompassing six cohort studies and one case-control study, with a total of 123,859 participants, the majority of whom were females (65.3%). The analysis also used a random-effects model to account for the heterogeneity across studies. The article acknowledges several limitations, including the small number of longitudinal studies available but overall it presents a more convincing argument to the hypothesis that living alone causes deteriorated mental health and so higher incidence of mental health related hospital admission. \n",
    "\n",
    "Therefore, overall, it seems logical to conclude that living alone leads to poorer mental health and, as a result, a higher incidence of mental health related hospital admission."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8865f360",
   "metadata": {},
   "source": [
    "### Limitations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a845f51",
   "metadata": {},
   "source": [
    "Causality vs. Correlation: In the context of this analysis, the data is observatory and neither variable is controlled for. If it was the case that the variables were controlled for in a strictly designed experiment then I could accept, with a high degree of sureness that higher rates of living alone cause higher rates of mental health related hospitalization. However due to the nature of our data, it cannot be said with sureness whether higher living alone rates are causing higher rates of mental health related hospitalization or if there is simply just a correlation. So I think that it is best to conclude that there is certainly correlation between our variables, and from our other statistical analyses methods, there is modest reason to believe that there is causation. \n",
    "\n",
    "\n",
    "Confouding variables: Confounding variables are the unseen factors that could be influencing both my variables. In the case of my data, one important confounding variable may be the age distribution of a community. Communities with a higher proportion of elderly people would perhaps have higher rates of living alone due to, for instance, widowhood. Older people due to savings, cheaper mortgage rates in the past, etc would also be more likely to own private households in Toronto as opposed to their younger countrparts who face higher housing costs and have had less time to save. So, in theory, if old people make up the bulk of private household ownership then it is possible that they live alone due to things like widowhood whilst also experiencing deteriorated mental health due to the multitude difficulties that elderly face. Loneliness may only be one of these factors. Another confounder may be the obvious urban vs less urban divide, where the most urbanized communities in Toronto would at once contain less private housing options but also higher access rates to mental health spaces. On the other hand, Toronto communities living further away from the urban center may have more private households with people living alone but less access to mental health service. It is well documented that it is urban centers that have greater mental health options in comparison to rural/suburban areas, but since the data is focused completely on an urban area; Toronto, this may not be a reaonable enough confounding variable. As well, the general physical health of individuals in the community can be a confounding variable. Poor physical health can lead to higher rates of living alone (due to factors like separation from caretakers or the inability to live with others) and so higher mental health hospitalization rates.\n",
    "\n",
    "Limiations of the analysis and sources of error: Perhaps the biggest limitation of my analysis is the way in which the explanatory variable is derived. This analysis aims to explore the relationship between living alone and mental health. The issue is that there is no variable in the Toronto census data that just measures living alone. So my explanatory variable actually measures living alone rates among private households and not the general population. In other words, the x variable in this case does not prescisley evaluate living alone, instead doing so among private households. That means further factors that impact private households may also influence the outcome of the study. Lastly, the study is also cross-sectional, representing mental health data of communities for only a single year. That means, time may also be a sort of confounding variable for this study.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "184be396",
   "metadata": {},
   "source": [
    "## Works cited\n",
    "\n",
    "Source 1: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8036627/\n",
    "\n",
    "Source 2: https://www.frontiersin.org/journals/psychiatry/articles/10.3389/fpsyt.2022.954857/full\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
